  <%= form_with(model: sale, data:{
    controller: "nested-form",
    nested_form_wrapper_selector_value: '.nested-form-wrapper'
  }) do |form| %>
    <% if sale.errors.any? %>
      <div style="color: red">
        <h2><%= pluralize(sale.errors.count, "error") %> prohibited this sale from being saved:</h2>

        <ul>
          <% sale.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div style="display: inline-block;">
    <%= form.label :date %>
    <%= form.date_field :date %>
  </div>

  <div style="display: inline-block;">
    <%= form.label :total_amount %>
    <%= form.number_field :total_amount %>
  </div>

  <div style="display: inline-block;">
    <%= form.label :total_products %>
    <%= form.number_field :total_products %>
  </div>
  <br><br>
  <h3>--------------------------------------------------------------------------------------------</h3>
    <h1> Add Product</h2>
    <template data-nested-form-target="template">
    <%= form.fields_for :saledetails, Saledetail.new, child_index: 'NEW_RECORD' do |saledetail_fields| %>
      <%= render "sales/saledetail_form", f: saledetail_fields %>
    <% end %>
    </template>
    <%= form.fields_for :saledetails do |saledetail_fields| %>
      <%= render "sales/saledetail_form", f: saledetail_fields %>
      <% end %>

   

    <div data-nested-form-target="target"> </div><br>
    <button type="button" data-action="nested-form#add">ADD More Products </button>
  <br><br>
    <div>
      <%= form.submit "SAVE BILL" %>
    </div>
  <% end %>




  <script>

  document.addEventListener("DOMContentLoaded", function () {
    // Get all the elements
    var quantityFields = document.querySelectorAll(".quantity-field");
    var pricePerUnitFields = document.querySelectorAll(".price-per-unit-field");
    var totalPriceFields = document.querySelectorAll(".total-price-field");
    var totalAmountField = document.querySelector("#bill_total_amount"); // Assuming the ID is 'bill_total_amount'

    // Function to update total price
    function updateTotalPrice(index) {
      var quantity = parseFloat(quantityFields[index].value) || 0;
      var pricePerUnit = parseFloat(pricePerUnitFields[index].value) || 0;
      var totalPrice = quantity * pricePerUnit;

      // Update the total price field
      totalPriceFields[index].value = totalPrice.toFixed(2); // Adjust the precision as needed

      // Recalculate the total amount
      recalculateTotalAmount();
    }

    // Function to recalculate total amount
    function recalculateTotalAmount() {
      var totalAmount = 0;

      // Sum up all the total prices
      totalPriceFields.forEach(function (field) {
        totalAmount += parseFloat(field.value) || 0;
      });

      // Update the total amount field
      totalAmountField.value = totalAmount.toFixed(2); // Adjust the precision as needed
    }

    // Attach change event listeners to each quantity and price per unit field
    quantityFields.forEach(function (field, index) {
      field.addEventListener("input", function () {
        updateTotalPrice(index);
      });
    });

    pricePerUnitFields.forEach(function (field, index) {
      field.addEventListener("input", function () {
        updateTotalPrice(index);
      });
    });
  });
</script>
